Link with requirement and non functional requirements: https://www.naukri.com/code360/library/design-a-parking-lot-low-level-design

#include <bits/stdc++.h>
using namespace std;

class Payment {
  public:
    virtual double costPayment(double hours) = 0; // Pure virtual function
};

class CarPayment : public Payment {
  public:
    double costPayment(double hours) override {
        return hours * 2;
    }
};

class BikePayment : public Payment {
  public:
    double costPayment(double hours) override {
        return hours * 1;
    }
};

class HandicappedPayment : public Payment {
  public:
    double costPayment(double hours) override {
        return 0;
    }
};

class Vehicle {
  protected:
    Payment* pay;
    chrono::time_point<chrono::system_clock> parkedTime;

  public:
    virtual string getType() = 0; // Pure virtual function

    void setParkTime() {
        parkedTime = chrono::system_clock::now();
    }

    chrono::time_point<chrono::system_clock> getParkTime() {
        return parkedTime;
    }

    double costPayment(double hours) {
        return pay->costPayment(hours);
    }
};

class Car : public Vehicle {
  public:
    Car() {
        pay = new CarPayment();
    }
    string getType() override {
        return "Car";
    }
};

class Bike : public Vehicle {
  public:
    Bike() {
        pay = new BikePayment();
    }
    string getType() override {
        return "Bike";
    }
};

class HandicappedVehicle : public Vehicle {
  public:
    HandicappedVehicle() {
        pay = new HandicappedPayment();
    }
    string getType() override {
        return "Handicapped Vehicle";
    }
};

class ParkingLot {
  private:
    int floors, rows, spotsPerRow;
    vector<vector<vector<Vehicle*>>> arr;

  public:
    ParkingLot(int floors, int rows, int spotsPerRow) {
        this->floors = floors;
        this->rows = rows;
        this->spotsPerRow = spotsPerRow;
        arr.resize(floors, vector<vector<Vehicle*>>(rows, vector<Vehicle*>(spotsPerRow, nullptr)));
    }

    bool park(Vehicle* v, int floor, int row, int spot) {
        if (arr[floor][row][spot] == nullptr) {
            arr[floor][row][spot] = v;
            cout << v->getType() << " parked successfully at floor " << floor << ", row " << row << ", spot " << spot << "." << endl;
            return true;
        } else {
            cout << "Spot already occupied." << endl;
            return false;
        }
    }

    bool leave(Vehicle* v) {
        for (int i = 0; i < floors; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k < spotsPerRow; k++) {
                    if (arr[i][j][k] == v) {
                        double hours = calculateHours(v);
                        double cost = v->costPayment(hours);
                        arr[i][j][k] = nullptr;
                        cout << v->getType() << " left successfully. Total hours: " << hours << ", Total cost: $" << cost << endl;
                        return true;
                    }
                }
            }
        }
        cout << "No such vehicle found." << endl;
        return false;
    }

    double calculateHours(Vehicle* v) {
        auto now = chrono::system_clock::now();
        auto parkedTime = v->getParkTime();
        auto duration = chrono::duration_cast<chrono::hours>(now - parkedTime);
        return duration.count();
    }

    int availableSpots() {
        int count = 0;
        for (int i = 0; i < floors; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k < spotsPerRow; k++) {
                    if (arr[i][j][k] == nullptr) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    int handicappedSpots() {
        int count = 0;
        for (int i = 0; i < floors; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k < spotsPerRow; k++) {
                    if (dynamic_cast<HandicappedVehicle*>(arr[i][j][k]) != nullptr) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
};

int main() {
    ParkingLot p(3, 10, 20);

    Car c1, c2;
    Bike b1, b2;
    HandicappedVehicle h1;

    c1.setParkTime();
    p.park(&c1, 0, 0, 0);

    c2.setParkTime();
    p.park(&c2, 0, 0, 1);

    b1.setParkTime();
    p.park(&b1, 0, 0, 2);

    b2.setParkTime();
    p.park(&b2, 1, 0, 0);

    h1.setParkTime();
    p.park(&h1, 2, 0, 0);

    cout << "Available spots: " << p.availableSpots() << endl;
    cout << "Handicapped spots: " << p.handicappedSpots() << endl;

    p.leave(&c1);
    p.leave(&b1);

    cout << "Available spots after leaving: " << p.availableSpots() << endl;

    return 0;
}

Design pattern that can followed here
In the provided code, several design patterns are either implicitly used or could be explicitly adopted to improve the system's structure. Here’s a breakdown of the relevant design patterns:

1. Strategy Pattern
	•	Where it's used:
	◦	The Payment interface and its derived classes (CarPayment, BikePayment, HandicappedPayment) implement the Strategy Pattern.
	•	How it works:
	◦	The Payment class defines a common interface (costPayment) for calculating costs.
	◦	Each derived class provides a different cost calculation strategy based on the vehicle type.
	◦	The Vehicle class delegates the cost calculation to its associated Payment strategy.
	•	Advantages:
	◦	Makes it easy to add new pricing strategies without modifying existing code.
	◦	Follows the Open/Closed Principle: Open for extension, closed for modification.

2. Factory Pattern
	•	Where it could be used:
	◦	Instead of manually creating vehicle objects (Car, Bike, HandicappedVehicle), you can use a factory method to encapsulate the creation logic.
	•	Implementation: cpp Copy code   class VehicleFactory {
	•	  public:
	•	    static Vehicle* createVehicle(string type) {
	•	        if (type == "Car") return new Car();
	•	        else if (type == "Bike") return new Bike();
	•	        else if (type == "HandicappedVehicle") return new HandicappedVehicle();
	•	        else return nullptr;
	•	    }
	•	};
	•	  
	•	Usage in main(): cpp Copy code   Vehicle* car = VehicleFactory::createVehicle("Car");
	•	Vehicle* bike = VehicleFactory::createVehicle("Bike");
	•	  
	•	Advantages:
	◦	Centralizes object creation, making it easier to maintain.
	◦	Simplifies client code, as the client doesn't need to know how vehicles are constructed.

3. Singleton Pattern
	•	Where it could be used:
	◦	The ParkingLot class could follow the Singleton Pattern if there is only one parking lot in the system.
	•	Implementation: cpp Copy code   class ParkingLot {
	•	  private:
	•	    static ParkingLot* instance;
	•	    ParkingLot(int floors, int rows, int spotsPerRow) { ... }
	•	  
	•	  public:
	•	    static ParkingLot* getInstance(int floors, int rows, int spotsPerRow) {
	•	        if (!instance) {
	•	            instance = new ParkingLot(floors, rows, spotsPerRow);
	•	        }
	•	        return instance;
	•	    }
	•	};
	•	
	•	ParkingLot* ParkingLot::instance = nullptr;
	•	  
	•	Usage in main(): cpp Copy code   ParkingLot* lot = ParkingLot::getInstance(3, 10, 20);
	•	  
	•	Advantages:
	◦	Ensures only one instance of ParkingLot exists.
	◦	Useful in scenarios where a single resource must be shared across the system.

4. Template Method Pattern
	•	Where it could be used:
	◦	To define a general workflow for vehicle operations (e.g., parking, leaving) while allowing customization of specific steps.
	•	Implementation: cpp Copy code   class VehicleOperation {
	•	  public:
	•	    void process(Vehicle* v) {
	•	        setParkTime(v);
	•	        performOperation(v);
	•	    }
	•	    
	•	  protected:
	•	    virtual void performOperation(Vehicle* v) = 0; // Customizable step
	•	    void setParkTime(Vehicle* v) {
	•	        v->setParkTime();
	•	    }
	•	};
	•	
	•	class ParkOperation : public VehicleOperation {
	•	  protected:
	•	    void performOperation(Vehicle* v) override {
	•	        cout << v->getType() << " is being parked." << endl;
	•	    }
	•	};
	•	
	•	class LeaveOperation : public VehicleOperation {
	•	  protected:
	•	    void performOperation(Vehicle* v) override {
	•	        cout << v->getType() << " is leaving." << endl;
	•	    }
	•	};
	•	  
	•	Usage: cpp Copy code   VehicleOperation* parkOp = new ParkOperation();
	•	parkOp->process(car);
	•	  
	•	Advantages:
	◦	Provides a reusable skeleton for common workflows.
	◦	Customizes specific steps without changing the workflow.

5. Observer Pattern
	•	Where it could be used:
	◦	If a parking lot management system requires notifications when parking spots are filled or vacated, you can implement the Observer Pattern.
	•	Implementation: cpp Copy code   class Observer {
	•	  public:
	•	    virtual void update(int availableSpots) = 0;
	•	};
	•	
	•	class ParkingLot {
	•	  private:
	•	    vector<Observer*> observers;
	•	    int availableSpots;
	•	    
	•	  public:
	•	    void addObserver(Observer* o) {
	•	        observers.push_back(o);
	•	    }
	•	    
	•	    void notifyObservers() {
	•	        for (Observer* o : observers) {
	•	            o->update(availableSpots);
	•	        }
	•	    }
	•	    
	•	    void parkVehicle() {
	•	        availableSpots--;
	•	        notifyObservers();
	•	    }
	•	};
	•	
	•	class DisplayBoard : public Observer {
	•	  public:
	•	    void update(int availableSpots) override {
	•	        cout << "Available spots: " << availableSpots << endl;
	•	    }
	•	};
	•	  
	•	Usage: cpp Copy code   ParkingLot lot;
	•	DisplayBoard board;
	•	lot.addObserver(&board);
	•	  
	•	Advantages:
	◦	Allows decoupling between the parking lot and display systems.
	◦	Real-time updates for connected observers.

6. Composite Pattern
	•	Where it could be used:
	◦	If the parking lot is part of a larger hierarchy (e.g., multiple parking lots managed by a single system), you can use the Composite Pattern to treat individual lots and the system as a whole uniformly.
	•	Advantages:
	◦	Simplifies management of hierarchical structures.

Which Patterns Are Most Relevant?
For your system, the Strategy Pattern, Factory Pattern, and optionally the Observer Pattern are most applicable:
	1	Strategy Pattern: For flexible payment calculation.
	2	Factory Pattern: To manage vehicle creation.
	3	Observer Pattern: To track and notify about parking lot status changes (e.g., available spots).
Would you like me to help implement any of these patterns?
