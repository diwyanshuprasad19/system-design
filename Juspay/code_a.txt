
Exaplaintion:https://docs.google.com/document/d/1ZKGMgkpgwIIbhAYkJZJQVfbD3EM5RjHolHZ8AvdMC9E/edit?tab=t.0

sol:https://leetcode.com/discuss/interview-question/5477671/Tree-of-Space-or-Juspay-Interview-Question-or-Optimal-or-LockUnlockUpgrade

Code:

#include <bits/stdc++.h>
using namespace std;

struct Node {
    string label;
    vector<Node *> children;
    Node *parent;
    int ancestorLocked, descendantLocked, userID;
    bool isLocked;

    Node(string name, Node *parentNode) {
        label = name;
        parent = parentNode;
        ancestorLocked = descendantLocked = userID = 0;
        isLocked = false;
    }

    void addChildren(vector<string> &childLabels, Node *parentNode) {
        for (auto &childLabel : childLabels) {
            children.push_back(new Node(childLabel, parentNode));
        }
    }
};

Node *buildTree(Node *root, int &numChildren, vector<string> &nodeLabels);

class LockingTree {
private:
    Node *root;
    unordered_map<string, Node *> labelToNode;
    vector<string> outputLog;

public:
    LockingTree(Node *treeRoot) { root = treeRoot; }
    Node *getRoot() { return root; }

    void fillLabelToNode(Node *currentNode) {
        if (!currentNode) return;
        labelToNode[currentNode->label] = currentNode;
        for (auto child : currentNode->children) fillLabelToNode(child);
    }

    void updateDescendant(Node *currentNode, int value) {
        for (auto child : currentNode->children) {
            child->ancestorLocked += value;
            updateDescendant(child, value);
        }
    }

    bool checkDescendantsLocked(Node *currentNode, int &id, vector<Node *> &lockedNodes) {
        if (currentNode->isLocked) {
            if (currentNode->userID != id) return false;
            lockedNodes.push_back(currentNode);
        }

        if (currentNode->descendantLocked == 0) return true;

        for (auto child : currentNode->children) {
            if (!checkDescendantsLocked(child, id, lockedNodes)) return false;
        }

        return true;
    }

    bool lockNode(string label, int id) {
        Node *targetNode = labelToNode[label];

        if (targetNode->isLocked || targetNode->ancestorLocked || targetNode->descendantLocked) return false;

        Node *currentNode = targetNode->parent;
        while (currentNode) {
            currentNode->descendantLocked++;
            currentNode = currentNode->parent;
        }

        updateDescendant(targetNode, 1);
        targetNode->isLocked = true;
        targetNode->userID = id;
        return true;
    }

    bool unlockNode(string label, int id) {
        Node *targetNode = labelToNode[label];

        if (!targetNode->isLocked || targetNode->userID != id) return false;

        Node *currentNode = targetNode->parent;
        while (currentNode) {
            currentNode->descendantLocked--;
            currentNode = currentNode->parent;
        }

        updateDescendant(targetNode, -1);
        targetNode->isLocked = false;
        return true;
    }

    bool upgradeNode(string label, int id) {
        Node *targetNode = labelToNode[label];

        if (targetNode->isLocked || targetNode->ancestorLocked || targetNode->descendantLocked == 0) return false;

        vector<Node *> lockedDescendants;
        if (checkDescendantsLocked(targetNode, id, lockedDescendants)) {
            for (auto lockedDescendant : lockedDescendants) unlockNode(lockedDescendant->label, id);
        } else return false;

        return lockNode(label, id);
    }

    void processQueries(vector<pair<int, pair<string, int>>> &queries) {
        for (auto &query : queries) {
            int opcode = query.first;
            string nodeLabel = query.second.first;
            int userId = query.second.second;

            switch (opcode) {
                case 1: outputLog.push_back(lockNode(nodeLabel, userId) ? "true" : "false"); break;
                case 2: outputLog.push_back(unlockNode(nodeLabel, userId) ? "true" : "false"); break;
                case 3: outputLog.push_back(upgradeNode(nodeLabel, userId) ? "true" : "false"); break;
            }
        }
    }

    void printOutputLog() {
        for (const string &result : outputLog) cout << result << "\n";
    }
};

int main() {
    int numNodes, numChildren, numQueries;
    cin >> numNodes >> numChildren >> numQueries;

    vector<string> nodeLabels(numNodes);
    for (int i = 0; i < numNodes; i++) cin >> nodeLabels[i];

    Node *rootNode = new Node(nodeLabels[0], nullptr);
    rootNode = buildTree(rootNode, numChildren, nodeLabels);

    LockingTree lockingTree(rootNode);
    lockingTree.fillLabelToNode(lockingTree.getRoot());

    vector<pair<int, pair<string, int>>> queries(numQueries);
    for (int i = 0; i < numQueries; i++)
        cin >> queries[i].first >> queries[i].second.first >> queries[i].second.second;

    lockingTree.processQueries(queries);
    lockingTree.printOutputLog();
    return 0;
}

Node *buildTree(Node *root, int &numChildren, vector<string> &nodeLabels) {
    queue<Node *> q;
    q.push(root);
    int startIndex = 1;

    while (!q.empty()) {
        Node *currentNode = q.front();
        q.pop();

        if (startIndex >= nodeLabels.size()) continue;

        vector<string> tempChildrenLabels;
        for (int i = startIndex; i < startIndex + numChildren; i++)
            tempChildrenLabels.push_back(nodeLabels[i]);

        currentNode->addChildren(tempChildrenLabels, currentNode);
        startIndex += numChildren;

        for (auto child : currentNode->children) q.push(child);
    }

    return root;
}

*******
input
7
2
5
World
Asia
Africa
China
India
SouthAfrica
Egypt
1 China 9
1 India 9
3 Asia 9
2 India 9
2 Asia 9


*******8
true
true
true
false
true




**************************************************************************
Tree Construction (buildTree function):

The tree is constructed using a BFS approach.

Each node is processed once, and for each node, its children are added.

Since there are n nodes, the time complexity is O(n).

Filling the labelToNode Map (fillLabelToNode function):

This function traverses the entire tree once.

Each node is visited once, so the time complexity is O(n).

Locking a Node (lockNode function):

The function first checks if the node is already locked or if any ancestor or descendant is locked. This is done in O(1) time.

Then, it updates the descendantLocked count for all ancestors, which takes O(h) time, where h is the height of the tree.

Finally, it updates the ancestorLocked count for all descendants, which takes O(m) time, where m is the number of descendants.

In the worst case, the height of the tree could be O(n) (for a skewed tree), and the number of descendants could also be O(n).

Therefore, the worst-case time complexity is O(n).

Unlocking a Node (unlockNode function):

Similar to lockNode, this function updates the descendantLocked count for all ancestors and the ancestorLocked count for all descendants.

The worst-case time complexity is O(n).

Upgrading a Node (upgradeNode function):

This function first checks if the node can be upgraded, which involves checking if any descendant is locked by a different user. This takes O(m) time, where m is the number of descendants.

If the node can be upgraded, it unlocks all locked descendants and then locks the node.

Unlocking all descendants takes O(m) time, and locking the node takes O(h) time.

Therefore, the worst-case time complexity is O(n).

Processing Queries (processQueries function):

Each query is processed by calling either lockNode, unlockNode, or upgradeNode.

Since each of these operations takes O(n) time in the worst case, and there are q queries, the total time complexity is O(q * n).

Space Complexity Analysis
Tree Storage:

The tree is stored using Node objects, each of which contains a vector of children.

The space required to store the tree is O(n), where n is the number of nodes.

labelToNode Map:

This map stores a mapping from node labels to Node pointers.

The space required is O(n).

Output Log:

The output log stores the results of the queries.

If there are q queries, the space required is O(q).

Recursive Function Calls:

Functions like fillLabelToNode, updateDescendant, and checkDescendantsLocked use recursion.

The maximum depth of recursion is the height of the tree, which is O(h). In the worst case, this could be O(n).

Summary
Time Complexity:

Tree Construction: O(n)

Filling labelToNode: O(n)

Locking/Unlocking/Upgrading a Node: O(n) per operation

Processing Queries: O(q * n)

Space Complexity:

Tree Storage: O(n)

labelToNode Map: O(n)

Output Log: O(q)

Recursive Function Calls: O(h) (worst case O(n))

Final Answer
Time Complexity: O(q * n)

Space Complexity: O(n + q)

Where:

n is the number of nodes in the tree.

q is the number of queries.

h is the height of the tree (worst case O(n)).