https://docs.google.com/document/d/1Wj383Yl6YAbrD7sMUiAKvbOmuFNbneIkeWYjLvw7YOk/edit?tab=t.0

Article:https://leetcode.com/discuss/interview-question/object-oriented-design/3846271/LLD-or-Design-a-Payment-Gateway







****************************************************************************************************

Basic Code:
#include <bits/stdc++.h>

using namespace std;

// Bank Class
class Bank {
    string name;

public:
    Bank(const string& bankName) : name(bankName) {
        srand(time(0)); // Seed random generator
    }

    bool processTransaction() {
        return rand() % 2 == 0; // Random success/failure
    }

    string getName() const {
        return name;
    }
};

// Payment Strategy Interface
class PaymentStrategy {
public:
    virtual bool validateDetails(const unordered_map<string, string>& details) = 0;
    virtual bool processPayment(Bank& bank, const unordered_map<string, string>& details) = 0;
    virtual ~PaymentStrategy() = default;
};

// UPI Payment Strategy
class UpiPayment : public PaymentStrategy {
public:
    bool validateDetails(const unordered_map<string, string>& details) override {
        return details.find("upi_pin") != details.end();
    }

    bool processPayment(Bank& bank, const unordered_map<string, string>& details) override {
        if (!validateDetails(details)) {
            cout << "UPI Payment failed: Missing UPI PIN.\n";
            return false;
        }
        return bank.processTransaction();
    }
};

// Netbanking Payment Strategy
class NetbankingPayment : public PaymentStrategy {
public:
    bool validateDetails(const unordered_map<string, string>& details) override {
        return details.find("user_id") != details.end() && details.find("password") != details.end();
    }

    bool processPayment(Bank& bank, const unordered_map<string, string>& details) override {
        if (!validateDetails(details)) {
            cout << "Netbanking Payment failed: Missing user ID or password.\n";
            return false;
        }
        return bank.processTransaction();
    }
};

// Client Class
class Client {
    string name;
    unordered_set<string> paymentModes;

public:
    Client(const string& clientName) : name(clientName) {}

    void addPaymentMode(const string& mode) {
        paymentModes.insert(mode);
    }

    void removePaymentMode(const string& mode) {
        paymentModes.erase(mode);
    }

    bool supportsPaymentMode(const string& mode) const {
        return paymentModes.find(mode) != paymentModes.end();
    }

    string getName() const {
        return name;
    }

    unordered_set<string> getPaymentModes() const {
        return paymentModes;
    }
};

// Payment Gateway Class
class PaymentGateway {
    unordered_map<string, Client> clients;
    vector<Bank> banks;
    PaymentStrategy* strategy;

public:
    PaymentGateway() : strategy(nullptr) {}

    void addClient(const string& clientName) {
        clients[clientName] = Client(clientName);
    }

    void removeClient(const string& clientName) {
        clients.erase(clientName);
    }

    bool hasClient(const string& clientName) {
        return clients.find(clientName) != clients.end();
    }

    void addPaymentModeToClient(const string& clientName, const string& mode) {
        if (clients.find(clientName) != clients.end()) {
            clients[clientName].addPaymentMode(mode);
        }
    }

    void removePaymentModeFromClient(const string& clientName, const string& mode) {
        if (clients.find(clientName) != clients.end()) {
            clients[clientName].removePaymentMode(mode);
        }
    }

    void listSupportedPaymodes(const string& clientName) {
        if (clients.find(clientName) == clients.end()) {
            cout << "Client not found.\n";
            return;
        }
        cout << "Supported payment modes for " << clientName << ": ";
        for (const auto& mode : clients[clientName].getPaymentModes()) {
            cout << mode << " ";
        }
        cout << endl;
    }

    void setPaymentStrategy(PaymentStrategy* newStrategy) {
        strategy = newStrategy;
    }

    void addBank(const string& bankName) {
        banks.emplace_back(bankName);
    }

    void processPayment(const string& clientName, const unordered_map<string, string>& details) {
        if (!hasClient(clientName)) {
            cout << "Client not found.\n";
            return;
        }

        if (!strategy) {
            cout << "Payment strategy not set.\n";
            return;
        }

        const string& paymentType = details.at("type");
        if (!clients[clientName].supportsPaymentMode(paymentType)) {
            cout << "Payment mode not supported by client.\n";
            return;
        }

        if (banks.empty()) {
            cout << "No banks available for payment processing.\n";
            return;
        }

        // Always select the first bank for simplicity
        Bank& selectedBank = banks.front();
        if (strategy->processPayment(selectedBank, details)) {
            cout << "Payment successful via " << selectedBank.getName() << ".\n";
        } else {
            cout << "Payment failed via " << selectedBank.getName() << ".\n";
        }
    }
};

// Main Function
int main() {
    cout << "==================== Payment Gateway Simulation ====================" << endl;

    PaymentGateway gateway;

    // Add clients
    cout << "\nAdding Clients to Payment Gateway..." << endl;
    gateway.addClient("Flipkart");
    cout << "Client 'Flipkart' added." << endl;
    gateway.addClient("Amazon");
    cout << "Client 'Amazon' added." << endl;

    // Add banks
    cout << "\nIntegrating Banks into Payment Gateway..." << endl;
    gateway.addBank("HDFC");
    cout << "Bank 'HDFC' added." << endl;
    gateway.addBank("ICICI");
    cout << "Bank 'ICICI' added." << endl;

    // Add payment modes to clients
    cout << "\nAdding Payment Modes to Clients..." << endl;
    gateway.addPaymentModeToClient("Flipkart", "UPI");
    cout << "Payment mode 'UPI' added for 'Flipkart'." << endl;
    gateway.addPaymentModeToClient("Amazon", "Netbanking");
    cout << "Payment mode 'Netbanking' added for 'Amazon'." << endl;

    // List supported payment modes
    cout << "\nListing Supported Payment Modes for Clients..." << endl;
    gateway.listSupportedPaymodes("Flipkart");
    gateway.listSupportedPaymodes("Amazon");

    // Process UPI Payment
    cout << "\n=== Processing UPI Payment for Flipkart ===" << endl;
    UpiPayment upiStrategy;
    gateway.setPaymentStrategy(&upiStrategy);
    unordered_map<string, string> upiDetails = {{"type", "UPI"}, {"upi_pin", "1234"}};
    gateway.processPayment("Flipkart", upiDetails);

    // Attempt UPI Payment with invalid details
    cout << "\n=== Attempting UPI Payment for Flipkart with Missing Details ===" << endl;
    unordered_map<string, string> invalidUpiDetails = {{"type", "UPI"}};
    gateway.processPayment("Flipkart", invalidUpiDetails);

    // Process Netbanking Payment
    cout << "\n=== Processing Netbanking Payment for Amazon ===" << endl;
    NetbankingPayment netbankingStrategy;
    gateway.setPaymentStrategy(&netbankingStrategy);
    unordered_map<string, string> netbankingDetails = {{"type", "Netbanking"}, {"user_id", "user123"}, {"password", "pass123"}};
    gateway.processPayment("Amazon", netbankingDetails);

    cout << "\n==================== Simulation Complete ====================" << endl;

    return 0;
}

Design pattern used above:

The modified code (where the Router class was removed) continues to follow several design patterns, albeit with fewer patterns than the original version. Here's an analysis of the design patterns used in the updated code:

1. Strategy Pattern
	•	Where it's used:
	◦	PaymentStrategy is an interface for payment methods.
	◦	Concrete implementations like UpiPayment and NetbankingPayment provide specific payment processing logic.
	•	How it works:
	◦	The PaymentGateway delegates payment processing to a dynamically selected PaymentStrategy.
	◦	The strategy can be set using setPaymentStrategy().
	•	Advantages:
	◦	Allows adding new payment strategies without modifying existing code.
	◦	Keeps the PaymentGateway class agnostic of specific payment method details.

2. Command Pattern
	•	Where it's used:
	◦	processPayment method in PaymentGateway.
	•	How it works:
	◦	Encapsulates the payment process into a single method.
	◦	The method validates details, selects the bank (now always the first bank in the list), and processes the payment using the active PaymentStrategy.
	•	Advantages:
	◦	Simplifies client interaction by encapsulating the payment execution logic.
	◦	Facilitates code reuse for payment processing.

3. Single Responsibility Principle (SRP)
	•	Where it's applied:
	◦	Each class handles a single responsibility:
	▪	Bank: Simulates a banking entity.
	▪	Client: Manages the supported payment modes for each client.
	▪	PaymentStrategy: Encapsulates payment validation and processing logic.
	▪	PaymentGateway: Coordinates the payment process.
	•	Advantages:
	◦	Makes the code easier to understand and maintain.
	◦	Enables changes to be localized to individual components.

4. Dependency Injection (DI)
	•	Where it's applied:
	◦	The PaymentGateway does not directly depend on specific payment strategies.
	◦	Strategies are injected dynamically using setPaymentStrategy().
	•	Advantages:
	◦	Decouples PaymentGateway from specific payment implementations.
	◦	Enables the PaymentGateway to use different strategies at runtime.

What Was Removed?
	•	The Router class and its associated logic for traffic distribution were removed. This means:
	◦	No Weighted Random Selection: Bank selection is now deterministic (always picks the first bank in the list).
	◦	No Factory-Like Behavior: The centralized routing configuration logic is no longer present.

Summary of Patterns in the Modified Code
Pattern
Used In
Benefit
Strategy Pattern
PaymentStrategy and its subclasses
Flexible addition of payment methods.
Command Pattern
processPayment in PaymentGateway
Encapsulates payment execution logic.
Single Responsibility
All classes
Clear separation of concerns.
Dependency Injection
setPaymentStrategy in PaymentGateway
Decouples payment gateway from specific methods.


















************************************************************************************************************

Code: more with route and selections
#include <bits/stdc++.h>

using namespace std;

// Bank Class
class Bank {
    string name;

public:
    Bank(const string& bankName) : name(bankName) {
        srand(time(0)); // Seed random generator
    }

    bool processTransaction() {
        return rand() % 2 == 0; // Random success/failure
    }

    string getName() const {
        return name;
    }
};

// Payment Strategy Interface
class PaymentStrategy {
public:
    virtual bool validateDetails(const unordered_map<string, string>& details) = 0;
    virtual bool processPayment(Bank& bank, const unordered_map<string, string>& details) = 0;
    virtual ~PaymentStrategy() = default;
};

// UPI Payment Strategy
class UpiPayment : public PaymentStrategy {
public:
    bool validateDetails(const unordered_map<string, string>& details) override {
        return details.find("upi_pin") != details.end();
    }

    bool processPayment(Bank& bank, const unordered_map<string, string>& details) override {
        if (!validateDetails(details)) {
            cout << "UPI Payment failed: Missing UPI PIN.\n";
            return false;
        }
        return bank.processTransaction();
    }
};

// Netbanking Payment Strategy
class NetbankingPayment : public PaymentStrategy {
public:
    bool validateDetails(const unordered_map<string, string>& details) override {
        return details.find("user_id") != details.end() && details.find("password") != details.end();
    }

    bool processPayment(Bank& bank, const unordered_map<string, string>& details) override {
        if (!validateDetails(details)) {
            cout << "Netbanking Payment failed: Missing user ID or password.\n";
            return false;
        }
        return bank.processTransaction();
    }
};

// Client Class
class Client {
    string name;
    unordered_set<string> paymentModes;

public:
    Client(const string& clientName) : name(clientName) {}

    void addPaymentMode(const string& mode) {
        paymentModes.insert(mode);
    }

    void removePaymentMode(const string& mode) {
        paymentModes.erase(mode);
    }

    bool supportsPaymentMode(const string& mode) const {
        return paymentModes.find(mode) != paymentModes.end();
    }

    string getName() const {
        return name;
    }

    unordered_set<string> getPaymentModes() const {
        return paymentModes;
    }
};

// Router Class for Bank Selection and Distribution
class Router {
    unordered_map<string, vector<pair<Bank, int>>> routingTable; // Payment Type -> Banks with weights

public:
    void addRoute(const string& paymentType, const Bank& bank, int weight) {
        routingTable[paymentType].emplace_back(bank, weight);
    }

    Bank selectBank(const string& paymentType) {
        if (routingTable.find(paymentType) == routingTable.end()) {
            throw runtime_error("No routing available for payment type: " + paymentType);
        }

        // Weighted Random Selection
        vector<pair<Bank, int>>& banks = routingTable[paymentType];
        int totalWeight = 0;
        for (const auto& bank : banks) {
            totalWeight += bank.second;
        }

        int randValue = rand() % totalWeight;
        for (const auto& bank : banks) {
            if (randValue < bank.second) {
                return bank.first;
            }
            randValue -= bank.second;
        }
        return banks[0].first; // Fallback to the first bank
    }

    void showDistribution() const {
        cout << "Traffic distribution:" << endl;
        for (const auto& [type, banks] : routingTable) {
            cout << "Payment Type: " << type << endl;
            for (const auto& [bank, weight] : banks) {
                cout << "  Bank: " << bank.getName() << " (" << weight << "%)" << endl;
            }
        }
    }
};

// Payment Gateway Class
class PaymentGateway {
    unordered_map<string, Client> clients;
    vector<Bank> banks;
    PaymentStrategy* strategy;
    Router router;

public:
    PaymentGateway() : strategy(nullptr) {}

    void addClient(const string& clientName) {
        clients[clientName] = Client(clientName);
    }

    void removeClient(const string& clientName) {
        clients.erase(clientName);
    }

    bool hasClient(const string& clientName) {
        return clients.find(clientName) != clients.end();
    }

    void addPaymentModeToClient(const string& clientName, const string& mode) {
        if (clients.find(clientName) != clients.end()) {
            clients[clientName].addPaymentMode(mode);
        }
    }

    void removePaymentModeFromClient(const string& clientName, const string& mode) {
        if (clients.find(clientName) != clients.end()) {
            clients[clientName].removePaymentMode(mode);
        }
    }

    void listSupportedPaymodes(const string& clientName) {
        if (clients.find(clientName) == clients.end()) {
            cout << "Client not found.\n";
            return;
        }
        cout << "Supported payment modes for " << clientName << ": ";
        for (const auto& mode : clients[clientName].getPaymentModes()) {
            cout << mode << " ";
        }
        cout << endl;
    }

    void setPaymentStrategy(PaymentStrategy* newStrategy) {
        strategy = newStrategy;
    }

    void addBank(const string& bankName) {
        banks.emplace_back(bankName);
    }

    void configureRouter(const string& paymentType, const string& bankName, int weight) {
        auto it = find_if(banks.begin(), banks.end(),
                          [&](const Bank& bank) { return bank.getName() == bankName; });
        if (it != banks.end()) {
            router.addRoute(paymentType, *it, weight);
        }
    }

    void showDistribution() {
        router.showDistribution();
    }

    void processPayment(const string& clientName, const unordered_map<string, string>& details) {
        if (!hasClient(clientName)) {
            cout << "Client not found.\n";
            return;
        }

        if (!strategy) {
            cout << "Payment strategy not set.\n";
            return;
        }

        const string& paymentType = details.at("type");
        if (!clients[clientName].supportsPaymentMode(paymentType)) {
            cout << "Payment mode not supported by client.\n";
            return;
        }

        try {
            Bank selectedBank = router.selectBank(paymentType);
            if (strategy->processPayment(selectedBank, details)) {
                cout << "Payment successful via " << selectedBank.getName() << ".\n";
            } else {
                cout << "Payment failed via " << selectedBank.getName() << ".\n";
            }
        } catch (const exception& e) {
            cout << "Error during payment processing: " << e.what() << endl;
        }
    }
};

// Main Function


int main() {
    cout << "==================== Payment Gateway Simulation ====================" << endl;

    PaymentGateway gateway;

    // Add clients
    cout << "\nAdding Clients to Payment Gateway..." << endl;
    gateway.addClient("Flipkart");
    cout << "Client 'Flipkart' added." << endl;
    gateway.addClient("Amazon");
    cout << "Client 'Amazon' added." << endl;

    // Add banks
    cout << "\nIntegrating Banks into Payment Gateway..." << endl;
    gateway.addBank("HDFC");
    cout << "Bank 'HDFC' added." << endl;
    gateway.addBank("ICICI");
    cout << "Bank 'ICICI' added." << endl;

    // Configure Router
    cout << "\nConfiguring Router for Payment Methods..." << endl;
    gateway.configureRouter("UPI", "HDFC", 70);
    cout << "Configured 'UPI' payments: 70% traffic to 'HDFC'." << endl;
    gateway.configureRouter("UPI", "ICICI", 30);
    cout << "Configured 'UPI' payments: 30% traffic to 'ICICI'." << endl;
    gateway.configureRouter("Netbanking", "ICICI", 100);
    cout << "Configured 'Netbanking' payments: 100% traffic to 'ICICI'." << endl;

    // Add payment modes to clients
    cout << "\nAdding Payment Modes to Clients..." << endl;
    gateway.addPaymentModeToClient("Flipkart", "UPI");
    cout << "Payment mode 'UPI' added for 'Flipkart'." << endl;
    gateway.addPaymentModeToClient("Amazon", "Netbanking");
    cout << "Payment mode 'Netbanking' added for 'Amazon'." << endl;

    // List supported payment modes
    cout << "\nListing Supported Payment Modes for Clients..." << endl;
    gateway.listSupportedPaymodes("Flipkart");
    gateway.listSupportedPaymodes("Amazon");

    // Show traffic distribution
    cout << "\nDisplaying Traffic Distribution for Payment Modes..." << endl;
    gateway.showDistribution();

    // Process UPI Payment
    cout << "\n=== Processing UPI Payment for Flipkart ===" << endl;
    UpiPayment upiStrategy;
    gateway.setPaymentStrategy(&upiStrategy);
    unordered_map<string, string> upiDetails = {{"type", "UPI"}, {"upi_pin", "1234"}};
    gateway.processPayment("Flipkart", upiDetails);

    // Attempt UPI Payment with invalid details
    cout << "\n=== Attempting UPI Payment for Flipkart with Missing Details ===" << endl;
    unordered_map<string, string> invalidUpiDetails = {{"type", "UPI"}};
    gateway.processPayment("Flipkart", invalidUpiDetails);

    // Process Netbanking Payment
    cout << "\n=== Processing Netbanking Payment for Amazon ===" << endl;
    NetbankingPayment netbankingStrategy;
    gateway.setPaymentStrategy(&netbankingStrategy);
    unordered_map<string, string> netbankingDetails = {{"type", "Netbanking"}, {"user_id", "user123"}, {"password", "pass123"}};
    gateway.processPayment("Amazon", netbankingDetails);

    // Attempt Netbanking Payment for a Client without Netbanking Mode
    cout << "\n=== Attempting Netbanking Payment for Flipkart (Not Supported) ===" << endl;
    gateway.processPayment("Flipkart", netbankingDetails);

    // Show traffic distribution again
    cout << "\n=== Final Traffic Distribution ===" << endl;
    gateway.showDistribution();

    cout << "\n==================== Simulation Complete ====================" << endl;

    return 0;
}



Output:
==================== Payment Gateway Simulation ====================

Adding Clients to Payment Gateway...
Client 'Flipkart' added.
Client 'Amazon' added.

Integrating Banks into Payment Gateway...
Bank 'HDFC' added.
Bank 'ICICI' added.

Configuring Router for Payment Methods...
Configured 'UPI' payments: 70% traffic to 'HDFC'.
Configured 'UPI' payments: 30% traffic to 'ICICI'.
Configured 'Netbanking' payments: 100% traffic to 'ICICI'.

Adding Payment Modes to Clients...
Payment mode 'UPI' added for 'Flipkart'.
Payment mode 'Netbanking' added for 'Amazon'.

Listing Supported Payment Modes for Clients...
Supported payment modes for Flipkart: UPI 
Supported payment modes for Amazon: Netbanking 

Displaying Traffic Distribution for Payment Modes...
Traffic distribution:
Payment Type: UPI
  Bank: HDFC (70%)
  Bank: ICICI (30%)
Payment Type: Netbanking
  Bank: ICICI (100%)

=== Processing UPI Payment for Flipkart ===
Payment successful via HDFC.

=== Attempting UPI Payment for Flipkart with Missing Details ===
UPI Payment failed: Missing UPI PIN.

=== Processing Netbanking Payment for Amazon ===
Payment successful via ICICI.

=== Attempting Netbanking Payment for Flipkart (Not Supported) ===
Payment mode not supported by client.

=== Final Traffic Distribution ===
Traffic distribution:
Payment Type: UPI
  Bank: HDFC (70%)
  Bank: ICICI (30%)
Payment Type: Netbanking
  Bank: ICICI (100%)

==================== Simulation Complete ====================
