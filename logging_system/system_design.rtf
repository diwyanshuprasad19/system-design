https://docs.google.com/document/d/13tWDgafXIJbmAdgbmw-WaM7E6mcPoZMGh5NLsTLTjE4/edit?tab=t.0

For any query


Code full:
#include <bits/stdc++.h>
#include <ctime> // For time_t, time, and ctime
using namespace std;

// LogLevel enumeration
enum class LogLevel { DEBUG, INFO, WARNING, ERROR, FATAL };

// LogMessage class
class LogMessage {
public:
    LogMessage(LogLevel level, const string& message)
        : level(level), message(message), timestamp(time(nullptr)) {} // Use time(nullptr) to get the current time

    LogLevel getLevel() const { return level; }
    const string& getMessage() const { return message; }
    time_t getTimestamp() const { return timestamp; }

    string toString() const {
        stringstream ss;
        ss << "[" << logLevelToString(level) << "] " << ctime(&timestamp) << " - " << message; // Convert time_t to string
        return ss.str();
    }

private:
    LogLevel level;
    string message;
    time_t timestamp;

    static string logLevelToString(LogLevel level) {
        switch (level) {
            case LogLevel::DEBUG: return "DEBUG";
            case LogLevel::INFO: return "INFO";
            case LogLevel::WARNING: return "WARNING";
            case LogLevel::ERROR: return "ERROR";
            case LogLevel::FATAL: return "FATAL";
        }
        return "UNKNOWN";
    }
};

// LogAppender base class with Chain of Responsibility
class LogAppender {
protected:
    shared_ptr<LogAppender> nextAppender;

public:
    void setNextAppender(shared_ptr<LogAppender> next) {
        nextAppender = next;
    }

    virtual void append(const LogMessage& logMessage) {
        if (nextAppender) {
            nextAppender->append(logMessage);
        }
    }

    virtual ~LogAppender() = default;
};

// ConsoleAppender class
class ConsoleAppender : public LogAppender {
public:
    void append(const LogMessage& logMessage) override {
        cout << logMessage.toString();
        if (nextAppender) {
            nextAppender->append(logMessage);
        }
    }
};

// FileAppender class
class FileAppender : public LogAppender {
private:
    string filePath;

public:
    explicit FileAppender(const string& filePath) : filePath(filePath) {}

    void append(const LogMessage& logMessage) override {
        ofstream file(filePath, ios::app);
        if (file.is_open()) {
            file << logMessage.toString();
            file.close();
        } else {
            cerr << "Failed to open log file: " << filePath << endl;
        }
        if (nextAppender) {
            nextAppender->append(logMessage);
        }
    }
};

// Logger class
class Logger {
private:
    LogLevel logLevel;
    shared_ptr<LogAppender> rootAppender;

    Logger() : logLevel(LogLevel::INFO), rootAppender(make_shared<ConsoleAppender>()) {}

public:
    static Logger& getInstance() {
        static Logger instance;
        return instance;
    }

    void setLogLevel(LogLevel level) {
        logLevel = level;
    }

    void setRootAppender(shared_ptr<LogAppender> appender) {
        rootAppender = appender;
    }

    void log(LogLevel level, const string& message) {
        if (static_cast<int>(level) >= static_cast<int>(logLevel)) {
            LogMessage logMessage(level, message);
            rootAppender->append(logMessage);
        }
    }

    void debug(const string& message) { log(LogLevel::DEBUG, message); }
    void info(const string& message) { log(LogLevel::INFO, message); }
    void warning(const string& message) { log(LogLevel::WARNING, message); }
    void error(const string& message) { log(LogLevel::ERROR, message); }
    void fatal(const string& message) { log(LogLevel::FATAL, message); }
};

// Main function demonstrating the chain of responsibility
int main() {
    Logger& logger = Logger::getInstance();

    // Create appenders
    auto consoleAppender = make_shared<ConsoleAppender>();
    auto fileAppender = make_shared<FileAppender>("app.log");

    // Set up chain of responsibility
    consoleAppender->setNextAppender(fileAppender);

    // Configure logger
    logger.setRootAppender(consoleAppender);

    // Example 1: Default log level is INFO, logLevel = INFO
    cout << "Logging messages at INFO level:\n";
    logger.setLogLevel(LogLevel::INFO);
    logger.debug("This debug message won't appear (log level is INFO).");
    logger.info("An informational message.");
    logger.warning("A warning message.");
    logger.error("An error message.");
    logger.fatal("A fatal message.\n");

    // Example 2: Set log level to DEBUG, logLevel = DEBUG
    cout << "\nLogging messages at DEBUG level:\n";
    logger.setLogLevel(LogLevel::DEBUG);
    logger.debug("A debug message.");
    logger.info("Another informational message.");
    logger.warning("Another warning message.");
    logger.error("Another error message.");
    logger.fatal("Another fatal message.\n");

    // Check the app.log file for messages as well!

    return 0;
}

Expected Output
Console Output
When running the program, you'll see the following output in the console:
less
Copy code
Logging messages at INFO level:
[INFO] Thu Dec 18 10:25:00 2024 - An informational message.
[WARNING] Thu Dec 18 10:25:00 2024 - A warning message.
[ERROR] Thu Dec 18 10:25:00 2024 - An error message.
[FATAL] Thu Dec 18 10:25:00 2024 - A fatal message.

Logging messages at DEBUG level:
[DEBUG] Thu Dec 18 10:25:01 2024 - A debug message.
[INFO] Thu Dec 18 10:25:01 2024 - Another informational message.
[WARNING] Thu Dec 18 10:25:01 2024 - Another warning message.
[ERROR] Thu Dec 18 10:25:01 2024 - Another error message.
[FATAL] Thu Dec 18 10:25:01 2024 - Another fatal message.

File Output (app.log)
The app.log file will have the same content as the console output because the ConsoleAppender is chained to the FileAppender.

*************************************************
The code implements the Chain of Responsibility (CoR) design pattern along with elements of the Singleton and Strategy patterns.
1. Chain of Responsibility Design Pattern
The Chain of Responsibility pattern is used to pass a request along a chain of potential handlers until one of them handles it (or it reaches the end of the chain).
	•	In this code:
	◦	The LogAppender base class defines a setNextAppender method, allowing chaining of multiple appenders.
	◦	Each appender (e.g., ConsoleAppender, FileAppender) has the ability to handle a log message and forward it to the next appender in the chain.
	•	Implementation:
	◦	The chain is created by calling setNextAppender on an appender instance.
	◦	Each appender processes the log message and delegates the task to the next appender in the chain, if one exists.
This enables flexibility in how log messages are handled, allowing different types of logging mechanisms (e.g., console, file) to coexist and be extended without modifying existing code.
2. Singleton Design Pattern
The Singleton pattern ensures that only one instance of a class is created and provides a global point of access to it.
	•	In this code:
	◦	The Logger class is implemented as a singleton using a static Logger instance in the getInstance method.
	◦	This ensures a single global logger instance that can be accessed throughout the program.
	•	Implementation: cpp Copy code   static Logger& getInstance() {
	•	    static Logger instance;
	•	    return instance;
	•	}
	•	  
3. Strategy Design Pattern (Optional Element)
The Strategy pattern allows a class's behavior to be selected at runtime by encapsulating different algorithms or behaviors as interchangeable objects.
	•	In this code:
	◦	The LogAppender acts as a strategy for how log messages are processed.
	◦	Different concrete implementations of LogAppender (e.g., ConsoleAppender, FileAppender) encapsulate distinct logging behaviors.
	◦	At runtime, you can configure the logger with different appenders, effectively changing the logging strategy.
Summary of Design Patterns Used:
	1	Chain of Responsibility:
	◦	Appenders (ConsoleAppender, FileAppender) form a chain to handle log messages.
	2	Singleton:
	◦	The Logger class ensures a single global instance of the logger.
	3	Strategy:
	◦	Appenders encapsulate different logging strategies that can be dynamically configured.
This combination makes the logger extensible, reusable, and highly configurable.
