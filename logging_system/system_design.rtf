{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\froman\fcharset0 Times-Roman;
\f3\froman\fcharset0 Times-Bold;\f4\fnil\fcharset0 HelveticaNeue;\f5\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red0\green0\blue0;
\red179\green179\blue179;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;\cssrgb\c0\c0\c0\c84706;
\cssrgb\c75294\c75294\c75294;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 https://docs.google.com/document/d/13tWDgafXIJbmAdgbmw-WaM7E6mcPoZMGh5NLsTLTjE4/edit?tab=t.0\
\
For any query\
\
\
Code full:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include <bits/stdc++.h>\
#include <ctime> // For time_t, time, and ctime\
using namespace std;\
\
// LogLevel enumeration\
enum class LogLevel \{ DEBUG, INFO, WARNING, ERROR, FATAL \};\
\
// LogMessage class\
class LogMessage \{\
public:\
    LogMessage(LogLevel level, const string& message)\
        : level(level), message(message), timestamp(time(nullptr)) \{\} // Use time(nullptr) to get the current time\
\
    LogLevel getLevel() const \{ return level; \}\
    const string& getMessage() const \{ return message; \}\
    time_t getTimestamp() const \{ return timestamp; \}\
\
    string toString() const \{\
        stringstream ss;\
        ss << "[" << logLevelToString(level) << "] " << ctime(&timestamp) << " - " << message; // Convert time_t to string\
        return ss.str();\
    \}\
\
private:\
    LogLevel level;\
    string message;\
    time_t timestamp;\
\
    static string logLevelToString(LogLevel level) \{\
        switch (level) \{\
            case LogLevel::DEBUG: return "DEBUG";\
            case LogLevel::INFO: return "INFO";\
            case LogLevel::WARNING: return "WARNING";\
            case LogLevel::ERROR: return "ERROR";\
            case LogLevel::FATAL: return "FATAL";\
        \}\
        return "UNKNOWN";\
    \}\
\};\
\
// LogAppender base class with Chain of Responsibility\
class LogAppender \{\
protected:\
    shared_ptr<LogAppender> nextAppender;\
\
public:\
    void setNextAppender(shared_ptr<LogAppender> next) \{\
        nextAppender = next;\
    \}\
\
    virtual void append(const LogMessage& logMessage) \{\
        if (nextAppender) \{\
            nextAppender->append(logMessage);\
        \}\
    \}\
\
    virtual ~LogAppender() = default;\
\};\
\
// ConsoleAppender class\
class ConsoleAppender : public LogAppender \{\
public:\
    void append(const LogMessage& logMessage) override \{\
        cout << logMessage.toString();\
        if (nextAppender) \{\
            nextAppender->append(logMessage);\
        \}\
    \}\
\};\
\
// FileAppender class\
class FileAppender : public LogAppender \{\
private:\
    string filePath;\
\
public:\
    explicit FileAppender(const string& filePath) : filePath(filePath) \{\}\
\
    void append(const LogMessage& logMessage) override \{\
        ofstream file(filePath, ios::app);\
        if (file.is_open()) \{\
            file << logMessage.toString();\
            file.close();\
        \} else \{\
            cerr << "Failed to open log file: " << filePath << endl;\
        \}\
        if (nextAppender) \{\
            nextAppender->append(logMessage);\
        \}\
    \}\
\};\
\
// Logger class\
class Logger \{\
private:\
    LogLevel logLevel;\
    shared_ptr<LogAppender> rootAppender;\
\
    Logger() : logLevel(LogLevel::INFO), rootAppender(make_shared<ConsoleAppender>()) \{\}\
\
public:\
    static Logger& getInstance() \{\
        static Logger instance;\
        return instance;\
    \}\
\
    void setLogLevel(LogLevel level) \{\
        logLevel = level;\
    \}\
\
    void setRootAppender(shared_ptr<LogAppender> appender) \{\
        rootAppender = appender;\
    \}\
\
    void log(LogLevel level, const string& message) \{\
        if (static_cast<int>(level) >= static_cast<int>(logLevel)) \{\
            LogMessage logMessage(level, message);\
            rootAppender->append(logMessage);\
        \}\
    \}\
\
    void debug(const string& message) \{ log(LogLevel::DEBUG, message); \}\
    void info(const string& message) \{ log(LogLevel::INFO, message); \}\
    void warning(const string& message) \{ log(LogLevel::WARNING, message); \}\
    void error(const string& message) \{ log(LogLevel::ERROR, message); \}\
    void fatal(const string& message) \{ log(LogLevel::FATAL, message); \}\
\};\
\
// Main function demonstrating the chain of responsibility\
int main() \{\
    Logger& logger = Logger::getInstance();\
\
    // Create appenders\
    auto consoleAppender = make_shared<ConsoleAppender>();\
    auto fileAppender = make_shared<FileAppender>("app.log");\
\
    // Set up chain of responsibility\
    consoleAppender->setNextAppender(fileAppender);\
\
    // Configure logger\
    logger.setRootAppender(consoleAppender);\
\
    // Example 1: Default log level is INFO, logLevel = INFO\
    cout << "Logging messages at INFO level:\\n";\
    logger.setLogLevel(LogLevel::INFO);\
    logger.debug("This debug message won't appear (log level is INFO).");\
    logger.info("An informational message.");\
    logger.warning("A warning message.");\
    logger.error("An error message.");\
    logger.fatal("A fatal message.\\n");\
\
    // Example 2: Set log level to DEBUG, logLevel = DEBUG\
    cout << "\\nLogging messages at DEBUG level:\\n";\
    logger.setLogLevel(LogLevel::DEBUG);\
    logger.debug("A debug message.");\
    logger.info("Another informational message.");\
    logger.warning("Another warning message.");\
    logger.error("Another error message.");\
    logger.fatal("Another fatal message.\\n");\
\
    // Check the app.log file for messages as well!\
\
    return 0;\
\}\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 \strokec2 Expected Output\
\pard\pardeftab720\sa319\partightenfactor0

\fs24 \cf0 Console Output\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 When running the program, you'll see the following output in the console:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 less\
\pard\pardeftab720\partightenfactor0

\f4\fs22 \cf4 \cb5 \strokec4 Copy code
\f1\fs26 \cf0 \cb1 \strokec2 \
Logging messages at INFO level:\
[INFO] Thu Dec 18 10:25:00 2024 - An informational message.\
[WARNING] Thu Dec 18 10:25:00 2024 - A warning message.\
[ERROR] Thu Dec 18 10:25:00 2024 - An error message.\
[FATAL] Thu Dec 18 10:25:00 2024 - A fatal message.\
\
Logging messages at DEBUG level:\
[DEBUG] Thu Dec 18 10:25:01 2024 - A debug message.\
[INFO] Thu Dec 18 10:25:01 2024 - Another informational message.\
[WARNING] Thu Dec 18 10:25:01 2024 - Another warning message.\
[ERROR] Thu Dec 18 10:25:01 2024 - Another error message.\
[FATAL] Thu Dec 18 10:25:01 2024 - Another fatal message.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec2 File Output (
\f5\fs26 app.log
\f3\fs24 )\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 The 
\f1\fs26 app.log
\f2\fs24  file will have the same content as the console output because the 
\f1\fs26 ConsoleAppender
\f2\fs24  is chained to the 
\f1\fs26 FileAppender
\f2\fs24 .\
\
*************************************************\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 The code implements the 
\f3\b \strokec2 Chain of Responsibility (CoR) design pattern
\f2\b0 \strokec2  along with elements of the 
\f3\b \strokec2 Singleton
\f2\b0 \strokec2  and 
\f3\b \strokec2 Strategy
\f2\b0 \strokec2  patterns.\
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 1. Chain of Responsibility Design Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf0 The 
\f3\b \strokec2 Chain of Responsibility
\f2\b0 \strokec2  pattern is used to pass a request along a chain of potential handlers until one of them handles it (or it reaches the end of the chain).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In this code:
\f2\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f1\fs26 LogAppender
\f2\fs24  base class defines a 
\f1\fs26 setNextAppender
\f2\fs24  method, allowing chaining of multiple appenders.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Each appender (e.g., 
\f1\fs26 ConsoleAppender
\f2\fs24 , 
\f1\fs26 FileAppender
\f2\fs24 ) has the ability to handle a log message and forward it to the next appender in the chain.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implementation:
\f2\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The chain is created by calling 
\f1\fs26 setNextAppender
\f2\fs24  on an appender instance.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Each appender processes the log message and delegates the task to the next appender in the chain, if one exists.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 This enables flexibility in how log messages are handled, allowing different types of logging mechanisms (e.g., console, file) to coexist and be extended without modifying existing code.\
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 2. Singleton Design Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf0 The 
\f3\b \strokec2 Singleton
\f2\b0 \strokec2  pattern ensures that only one instance of a class is created and provides a global point of access to it.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In this code:
\f2\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f1\fs26 Logger
\f2\fs24  class is implemented as a singleton using a 
\f1\fs26 static Logger instance
\f2\fs24  in the 
\f1\fs26 getInstance
\f2\fs24  method.\
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This ensures a single global logger instance that can be accessed throughout the program.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implementation:
\f2\b0 \uc0\u8232 
\f1\fs26 cpp\uc0\u8232 
\f4\fs22 \cf4 \cb5 \strokec4 Copy code
\f1\fs26 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 \u8232 static Logger& getInstance() \{\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     static Logger instance;\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     return instance;\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \}\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \u8232 
\f2\fs24 \
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 \strokec2 3. Strategy Design Pattern (Optional Element)\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf0 The 
\f3\b \strokec2 Strategy
\f2\b0 \strokec2  pattern allows a class's behavior to be selected at runtime by encapsulating different algorithms or behaviors as interchangeable objects.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In this code:
\f2\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f1\fs26 LogAppender
\f2\fs24  acts as a strategy for how log messages are processed.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Different concrete implementations of 
\f1\fs26 LogAppender
\f2\fs24  (e.g., 
\f1\fs26 ConsoleAppender
\f2\fs24 , 
\f1\fs26 FileAppender
\f2\fs24 ) encapsulate distinct logging behaviors.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 At runtime, you can configure the logger with different appenders, effectively changing the logging strategy.\
\pard\pardeftab720\sa280\partightenfactor0

\f3\b\fs28 \cf0 \strokec2 Summary of Design Patterns Used:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Chain of Responsibility
\f2\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Appenders (
\f1\fs26 ConsoleAppender
\f2\fs24 , 
\f1\fs26 FileAppender
\f2\fs24 ) form a chain to handle log messages.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Singleton
\f2\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f1\fs26 Logger
\f2\fs24  class ensures a single global instance of the logger.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Strategy
\f2\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Appenders encapsulate different logging strategies that can be dynamically configured.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 This combination makes the logger extensible, reusable, and highly configurable.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \
}