//code is in java:LLd will be done in java

public class City {
    private String name;

    public City(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
CinemaHallSeat.java
java
Copy code
public class CinemaHallSeat {
    private int seatNumber;
    private boolean isReserved;

    public CinemaHallSeat(int number) {
        this.seatNumber = number;
        this.isReserved = false;
    }

    public int getSeatNumber() {
        return seatNumber;
    }

    public boolean isSeatReserved() {
        return isReserved;
    }

    public void reserve() {
        isReserved = true;
    }

    public void release() {
        isReserved = false;
    }
}
CinemaHall.java
java
Copy code
import java.util.ArrayList;
import java.util.List;

public class CinemaHall


You said:
all in single file
ChatGPT said:
ChatGPT
Sure, I'll combine all the classes into a single Java file for you. This is generally not recommended for real-world applications due to maintainability issues, but for demonstration purposes, hereâ€™s how you could do it:

java
Copy code
import java.util.*;

// City class
class City {
    private String name;

    public City(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

// CinemaHallSeat class
class CinemaHallSeat {
    private int seatNumber;
    private boolean isReserved;

    public CinemaHallSeat(int number) {
        this.seatNumber = number;
        this.isReserved = false;
    }

    public int getSeatNumber() {
        return seatNumber;
    }

    public boolean isSeatReserved() {
        return isReserved;
    }

    public void reserve() {
        isReserved = true;
    }

    public void release() {
        isReserved = false;
    }
}

// CinemaHall class
class CinemaHall {
    private List<CinemaHallSeat> seats;
    private String hallName;

    public CinemaHall(String name, int numSeats) {
        this.hallName = name;
        seats = new ArrayList<>();
        for (int i = 1; i <= numSeats; ++i) {
            seats.add(new CinemaHallSeat(i));
        }
    }

    public void showSeatingArrangement() {
        for (CinemaHallSeat seat : seats) {
            System.out.println("Seat " + seat.getSeatNumber() + (seat.isSeatReserved() ? " (Reserved)" : " (Available)"));
        }
    }

    public boolean reserveSeat(int seatNumber) {
        for (CinemaHallSeat seat : seats) {
            if (seat.getSeatNumber() == seatNumber && !seat.isSeatReserved()) {
                seat.reserve();
                return true;
            }
        }
        return false;
    }

    public void releaseSeat(int seatNumber) {
        for (CinemaHallSeat seat : seats) {
            if (seat.getSeatNumber() == seatNumber) {
                seat.release();
                break;
            }
        }
    }

    public String getHallName() {
        return hallName;
    }
}

// Show class
class Show {
    private CinemaHall hall;
    private String movieTitle;
    private Date showTime;

    public Show(CinemaHall hall, String movieTitle, Date showTime) {
        this.hall = hall;
        this.movieTitle = movieTitle;
        this.showTime = showTime;
    }

    public CinemaHall getHall() {
        return hall;
    }

    public String getMovieTitle() {
        return movieTitle;
    }

    public Date getShowTime() {
        return showTime;
    }
}

// Movie class
class Movie {
    private String title;
    private String genre;
    private String language;
    private String releaseDate;
    private List<Show> shows;

    public Movie(String title, String genre, String language, String releaseDate) {
        this.title = title;
        this.genre = genre;
        this.language = language;
        this.releaseDate = releaseDate;
        shows = new ArrayList<>();
    }

    public void addShow(Show show) {
        shows.add(show);
    }

    public List<Show> getShows() {
        return shows;
    }

    public String getTitle() {
        return title;
    }

    public String getGenre() {
        return genre;
    }

    public String getLanguage() {
        return language;
    }

    public String getReleaseDate() {
        return releaseDate;
    }

    public static List<Movie> searchMovies(List<Movie> movies, String title, String genre, String language, String releaseDate) {
        List<Movie> results = new ArrayList<>();
        for (Movie movie : movies) {
            if ((title.isEmpty() || movie.getTitle().equals(title)) &&
                (genre.isEmpty() || movie.getGenre().equals(genre)) &&
                (language.isEmpty() || movie.getLanguage().equals(language)) &&
                (releaseDate.isEmpty() || movie.getReleaseDate().equals(releaseDate))) {
                results.add(movie);
            }
        }
        return results;
    }
}

// Cinema class
class Cinema {
    private List<CinemaHall> halls;
    private City city;

    public Cinema(City city) {
        this.city = city;
        halls = new ArrayList<>();
    }

    public void addHall(CinemaHall hall) {
        halls.add(hall);
    }

    public List<CinemaHall> getHalls() {
        return halls;
    }

    public City getCity() {
        return city;
    }
}

// Booking abstract class
abstract class Booking {
    protected Show show;
    protected int seatNumber;

    public Booking(Show show, int seatNumber) {
        this.show = show;
        this.seatNumber = seatNumber;
    }

    public abstract boolean reserve();
    public abstract void cancel();
}

// BasicBooking class
class BasicBooking extends Booking {

    public BasicBooking(Show show, int seatNumber) {
        super(show, seatNumber);
    }

    @Override
    public boolean reserve() {
        return show.getHall().reserveSeat(seatNumber);
    }

    @Override
    public void cancel() {
        show.getHall().releaseSeat(seatNumber);
    }
}

// BookingDecorator class
abstract class BookingDecorator extends Booking {
    protected Booking decoratedBooking;

    public BookingDecorator(Booking booking) {
        super(booking.show, booking.seatNumber);
        this.decoratedBooking = booking;
    }

    @Override
    public boolean reserve() {
        return decoratedBooking.reserve();
    }

    @Override
    public void cancel() {
        decoratedBooking.cancel();
    }
}

// PremiumBookingDecorator class
class PremiumBookingDecorator extends BookingDecorator {

    public PremiumBookingDecorator(Booking booking) {
        super(booking);
    }

    @Override
    public boolean reserve() {
        System.out.println("Adding premium features to booking.");
        return super.reserve();
    }
}

// PaymentStrategy interface
interface PaymentStrategy {
    void pay(double amount);
}

// CreditCardPayment class
class CreditCardPayment implements PaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Credit Card.");
    }
}

// CashPayment class
class CashPayment implements PaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Cash.");
    }
}

// Payment class
class Payment {
    private PaymentStrategy strategy;
    private double amount;

    public Payment(PaymentStrategy strategy, double amount) {
        this.strategy = strategy;
        this.amount = amount;
    }

    public void process() {
        strategy.pay(amount);
    }
}

// Notification class
class Notification {
    private String message;

    public Notification(String message) {
        this.message = message;
    }

    public void send() {
        System.out.println("Notification: " + message);
    }
}

// NotificationManager singleton class
class NotificationManager {
    private static NotificationManager instance;
    private List<Notification> notifications;

    private NotificationManager() {
        notifications = new ArrayList<>();
    }

    public static NotificationManager getInstance() {
        if (instance == null) {
            instance = new NotificationManager();
        }
        return instance;
    }

    public void addNotification(Notification notification) {
        notifications.add(notification);
        notification.send();
    }
}

// Observer interface
interface Observer {
    void update(String message);
}

// Subject class
class Subject {
    private List<Observer> observers;

    public Subject() {
        observers = new ArrayList<>();
    }

    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    public void notifyObservers(String message) {
        for (Observer observer : observers) {
            observer.update(message);
        }
    }
}

// CustomerObserver class
class CustomerObserver implements Observer {
    private String name;

    public CustomerObserver(String name) {
        this.name = name;
    }

    @Override
    public void update(String message) {
        System.out.println("Customer " + name + " received notification: " + message);
    }
}

// AdminObserver class
class AdminObserver implements Observer {
    private String name;

    public AdminObserver(String name) {
        this.name = name;
    }

    @Override
    public void update(String message) {
        System.out.println("Admin " + name + " received notification: " + message);
    }
}

// Account abstract class
abstract class Account {
    protected String username;
    protected String password;

    public abstract void login();
    public abstract void logout();
}

// Customer class
class Customer extends Account {
    @Override
    public void login() {
        System.out.println("Customer logged in: " + username);
    }

    @Override
    public void logout() {
        System.out.println("Customer logged out: " + username);
    }
}

// Admin class
class Admin extends Account {
    @Override
    public void login() {
        System.out.println("Admin logged in: " + username);
    }

    @Override
    public void logout() {
        System.out.println("Admin logged out: " + username);
    }
}

// Guest class
class Guest extends Account {
    @Override
    public void login() {
        System.out.println("Guest logged in: " + username);
    }

    @Override
    public void logout() {
        System.out.println("Guest logged out: " + username);
    }
}

// AccountFactory class
class AccountFactory {
    enum AccountType { CUSTOMER, ADMIN, GUEST }

    public static Account createAccount(AccountType type) {
        switch (type) {
            case CUSTOMER:
                return new Customer();
            case ADMIN:
                return new Admin();
            case GUEST:
                return new Guest();
            default:
                return null;
        }
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Setup example data
        City city = new City("New York");
        Cinema cinema = new Cinema(city);
        CinemaHall hall1 = new CinemaHall("Hall 1", 50);
        CinemaHall hall2 = new CinemaHall("Hall 2", 75);
        cinema.addHall(hall1);
        cinema.addHall(hall2);

        Movie movie1 = new Movie("Movie 1", "Action", "English", "2024-08-01");
        Movie movie2 = new Movie("Movie 2", "Drama", "English", "2024-09-01");

        Show show1 = new Show(hall1, movie1.getTitle(), new Date());
        Show show2 = new Show(hall2, movie2.getTitle(), new Date(System.currentTimeMillis() + 86400000L)); // 1 day later

        movie1.addShow(show1);
        movie2.addShow(show2);

        // Singleton Pattern
        NotificationManager nm = NotificationManager.getInstance();
        nm.addNotification(new Notification("New movie released!"));

        // Factory Method Pattern
        Account customer = AccountFactory.createAccount(AccountFactory.AccountType.CUSTOMER);
        customer.login();
        customer.logout();

        // Observer Pattern
        Subject subject = new Subject();
        CustomerObserver cust1 = new CustomerObserver("Alice");
        AdminObserver admin1 = new AdminObserver("Bob");
        subject.addObserver(cust1);
        subject.addObserver(admin1);
        subject.notifyObservers("New show available!");

        // Strategy Pattern
        PaymentStrategy paymentMethod = new CreditCardPayment();
        Payment payment = new Payment(paymentMethod, 100.0);
        payment.process();

        // Decorator Pattern
        Booking basicBooking = new BasicBooking(show1, 10);
        Booking premiumBooking = new PremiumBookingDecorator(basicBooking);
        premiumBooking.reserve(); // Correct method call

        // Booking example
        if (basicBooking.reserve()) {
            System.out.println("Seat reserved successfully!");
        } else {
            System.out.println("Failed to reserve seat.");
        }

        // Cancel booking
        basicBooking.cancel();
        System.out.println("Seat reservation canceled.");
    }
}
