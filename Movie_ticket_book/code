#include <bits/stdc++.h>
using namespace std;

// City class
class City {
    string name;
public:
    City(string name) : name(name) {}
    string getName() { return name; }
};

// CinemaHallSeat class
class CinemaHallSeat {
    int seatNumber;
    bool isReserved;
public:
    CinemaHallSeat(int number) : seatNumber(number), isReserved(false) {}

    int getSeatNumber() { return seatNumber; }
    bool isSeatReserved() { return isReserved; }

    void reserve() { isReserved = true; }
    void release() { isReserved = false; }
};

// CinemaHall class
class CinemaHall {
    vector<CinemaHallSeat> seats;
    string hallName;
public:
    CinemaHall(string name, int numSeats) : hallName(name) {
        for (int i = 1; i <= numSeats; ++i) {
            seats.emplace_back(i);
        }
    }

    void showSeatingArrangement() {
        for (auto& seat : seats) {
            cout << "Seat " << seat.getSeatNumber()
                 << (seat.isSeatReserved() ? " (Reserved)" : " (Available)") << endl;
        }
    }

    bool reserveSeat(int seatNumber) {
        for (auto& seat : seats) {
            if (seat.getSeatNumber() == seatNumber && !seat.isSeatReserved()) {
                seat.reserve();
                return true;
            }
        }
        return false;
    }

    void releaseSeat(int seatNumber) {
        for (auto& seat : seats) {
            if (seat.getSeatNumber() == seatNumber) {
                seat.release();
                break;
            }
        }
    }

    string getHallName() { return hallName; }
};

// Show class
class Show {
    CinemaHall* hall;
    string movieTitle;
    time_t showTime;
public:
    Show(CinemaHall* hall, string movieTitle, time_t showTime)
        : hall(hall), movieTitle(movieTitle), showTime(showTime) {}

    CinemaHall* getHall() { return hall; }
    string getMovieTitle() { return movieTitle; }
    time_t getShowTime() { return showTime; }
};

// Movie class
class Movie {
    string title, genre, language, releaseDate;
    vector<Show*> shows;
public:
    Movie(string title, string genre, string language, string releaseDate)
        : title(title), genre(genre), language(language), releaseDate(releaseDate) {}

    void addShow(Show* show) { shows.push_back(show); }
    vector<Show*> getShows() { return shows; }

    string getTitle() { return title; }
    string getGenre() { return genre; }
    string getLanguage() { return language; }
    string getReleaseDate() { return releaseDate; }

    static vector<Movie*> searchMovies(vector<Movie*>& movies, string title, string genre,
                                       string language, string releaseDate) {
        vector<Movie*> results;
        for (auto& movie : movies) {
            if ((title.empty() || movie->getTitle() == title) &&
                (genre.empty() || movie->getGenre() == genre) &&
                (language.empty() || movie->getLanguage() == language) &&
                (releaseDate.empty() || movie->getReleaseDate() == releaseDate)) {
                results.push_back(movie);
            }
        }
        return results;
    }
};

// Cinema class
class Cinema {
    vector<CinemaHall*> halls;
    City city;
public:
    Cinema(City city) : city(city) {}

    void addHall(CinemaHall* hall) { halls.push_back(hall); }
    vector<CinemaHall*> getHalls() { return halls; }
    City getCity() { return city; }
};

// PaymentStrategy interface
class PaymentStrategy {
public:
    virtual void pay(double amount) = 0;
    virtual ~PaymentStrategy() {}
};

// CreditCardPayment class
class CreditCardPayment : public PaymentStrategy {
public:
    void pay(double amount) override {
        cout << "Paid " << amount << " using Credit Card." << endl;
    }
};

// CashPayment class
class CashPayment : public PaymentStrategy {
public:
    void pay(double amount) override {
        cout << "Paid " << amount << " using Cash." << endl;
    }
};

// Payment class
class Payment {
    unique_ptr<PaymentStrategy> strategy;
    double amount;
public:
    Payment(unique_ptr<PaymentStrategy> strategy, double amount)
        : strategy(move(strategy)), amount(amount) {}

    void process() { strategy->pay(amount); }
};

int main() {
    // Setup example data
    City city("New York");
    Cinema cinema(city);

    // Adding Cinema Halls
    CinemaHall* hall1 = new CinemaHall("Hall 1", 10); // Reduced seats for simplicity
    CinemaHall* hall2 = new CinemaHall("Hall 2", 15);

    cinema.addHall(hall1);
    cinema.addHall(hall2);

    // Adding Movies and Shows
    Movie* movie1 = new Movie("Movie 1", "Action", "English", "2024-08-01");
    Movie* movie2 = new Movie("Movie 2", "Drama", "English", "2024-09-01");

    Show* show1 = new Show(hall1, movie1->getTitle(), time(nullptr));
    Show* show2 = new Show(hall2, movie2->getTitle(), time(nullptr) + 86400); // 1 day later

    movie1->addShow(show1);
    movie2->addShow(show2);

    // Display seating arrangement for Hall 1
    cout << "\nSeating arrangement for " << hall1->getHallName() << ":\n";
    hall1->showSeatingArrangement();

    // Reserve a few seats in Hall 1
    cout << "\nReserving seats 1 and 2 in " << hall1->getHallName() << "...\n";
    if (hall1->reserveSeat(1)) cout << "Seat 1 reserved successfully.\n";
    if (hall1->reserveSeat(2)) cout << "Seat 2 reserved successfully.\n";

    // Show updated seating arrangement
    cout << "\nUpdated seating arrangement for " << hall1->getHallName() << ":\n";
    hall1->showSeatingArrangement();

    // Release a seat in Hall 1
    cout << "\nReleasing seat 1 in " << hall1->getHallName() << "...\n";
    hall1->releaseSeat(1);

    // Show final seating arrangement
    cout << "\nFinal seating arrangement for " << hall1->getHallName() << ":\n";
    hall1->showSeatingArrangement();

    // Show information about movies and their shows
    cout << "\nMovies and their shows:\n";
    vector<Movie*> movies = {movie1, movie2};
    for (auto& movie : movies) {
        cout << "Movie: " << movie->getTitle() << " (" << movie->getGenre() << ", " << movie->getLanguage() << ", " << movie->getReleaseDate() << ")\n";
        for (auto& show : movie->getShows()) {
            cout << "  Show in " << show->getHall()->getHallName() << " at " << ctime(&show->getShowTime());
        }
    }

    // Strategy Pattern: Payment
    cout << "\nProcessing payment:\n";
    unique_ptr<PaymentStrategy> paymentMethod = make_unique<CreditCardPayment>();
    Payment payment(move(paymentMethod), 150.0);
    payment.process();

    // Clean up
    delete hall1;
    delete hall2;
    delete movie1;
    delete movie2;
    delete show1;
    delete show2;

    return 0;
}

Output:
Seating arrangement for Hall 1:
Seat 1 (Available)
Seat 2 (Available)
Seat 3 (Available)
Seat 4 (Available)
Seat 5 (Available)
Seat 6 (Available)
Seat 7 (Available)
Seat 8 (Available)
Seat 9 (Available)
Seat 10 (Available)

Reserving seats 1 and 2 in Hall 1...
Seat 1 reserved successfully.
Seat 2 reserved successfully.

Updated seating arrangement for Hall 1:
Seat 1 (Reserved)
Seat 2 (Reserved)
Seat 3 (Available)
Seat 4 (Available)
Seat 5 (Available)
Seat 6 (Available)
Seat 7 (Available)
Seat 8 (Available)
Seat 9 (Available)
Seat 10 (Available)

Releasing seat 1 in Hall 1...

Final seating arrangement for Hall 1:
Seat 1 (Available)
Seat 2 (Reserved)
Seat 3 (Available)
Seat 4 (Available)
Seat 5 (Available)
Seat 6 (Available)
Seat 7 (Available)
Seat 8 (Available)
Seat 9 (Available)
Seat 10 (Available)

Movies and their shows:
Movie: Movie 1 (Action, English, 2024-08-01)
  Show in Hall 1 at Fri Nov 29 12:00:00 2024
Movie: Movie 2 (Drama, English, 2024-09-01)
  Show in Hall 2 at Sat Nov 30 12:00:00 2024

Processing payment:
Paid 150 using Credit Card.

